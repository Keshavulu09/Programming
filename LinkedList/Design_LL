class Node {
    int data;
    Node next;
    
    Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }

    Node(int data) {
        this(data, null);
    }
}
class MyLinkedList {
    private Node head;

    public MyLinkedList() {
        head = null;
    }

    // Get the value of the index-th node in the linked list
    public int get(int index) {
        Node curr = head;
        int currNode = 0;
        
        while (curr != null && currNode < index) {
            curr = curr.next;
            currNode++;
        }
        
        return (curr != null) ? curr.data : -1;
    }

    // Add a node of value val before the first element of the linked list
    public void addAtHead(int val) {
        Node newNode = new Node(val, head);
        head = newNode;
    }

    // Append a node of value val to the last element of the linked list
    public void addAtTail(int val) {
        if (head == null) {
            addAtHead(val);
            return;
        }
        
        Node curr = head;
        while (curr.next != null) {
            curr = curr.next;
        }
        
        curr.next = new Node(val);
    }

    // Get the length of the linked list
    private int getLength() {
        Node curr = head;
        int count = 0;
        
        while (curr != null) {
            curr = curr.next;
            count++;
        }
        
        return count;
    }

    // Get the node at a specific index
    private Node getNode(int index) {
        if (index < 0 || index >= getLength()) {
            return null;
        }
        
        Node curr = head;
        int currIdx = 0;
        
        while (currIdx < index) {
            curr = curr.next;
            currIdx++;
        }
        
        return curr;
    }

    // Add a node of value val before the index-th node in the linked list
    public void addAtIndex(int index, int val) {
        if (index == 0) {
            addAtHead(val);
            return;
        }
        
        Node prevNode = getNode(index - 1);
        if (prevNode == null) {
            return;
        }
        
        Node newNode = new Node(val);
        newNode.next = prevNode.next;
        prevNode.next = newNode;
    }

    // Delete the index-th node in the linked list
    public void deleteAtIndex(int index) {
        if (index < 0 || index >= getLength()) {
            return;
        }
        
        if (index == 0) {
            head = head.next;
            return;
        }
        
        Node prevNode = getNode(index - 1);
        if (prevNode != null && prevNode.next != null) {
            prevNode.next = prevNode.next.next;
        }
    }
}
public class Main {
    public static void main(String[] args) {
        MyLinkedList obj = new MyLinkedList();
        obj.addAtHead(1);
        obj.addAtTail(3);
        obj.addAtIndex(1, 2);  // linked list becomes 1->2->3
        System.out.println(obj.get(1));  // returns 2
        obj.deleteAtIndex(1);  // now the linked list is 1->3
        System.out.println(obj.get(1));  // returns 3
    }
}
