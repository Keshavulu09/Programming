class Graph:
    def __init__(self, adjacency_list):
        self.vertices = {}
        for i, neighbors in enumerate(adjacency_list):
            self.add_vertex(i)
            for neighbor in neighbors:
                self.add_edge(i, neighbor)

    def add_vertex(self, value):
        if value not in self.vertices:
            self.vertices[value] = []

    def add_edge(self, from_vertex, to_vertex):
        if from_vertex in self.vertices and to_vertex in self.vertices:
            self.vertices[from_vertex].append(to_vertex)
            self.vertices[to_vertex].append(from_vertex)

    def dfs(self, start_vertex):
        visited = set()
        traversal_order = []

        def dfs_helper(vertex):
            visited.add(vertex)
            traversal_order.append(vertex)
            for neighbor in self.vertices[vertex]:
                if neighbor not in visited:
                    dfs_helper(neighbor)

        dfs_helper(start_vertex)
        return traversal_order

    def display_graph(self):
        for vertex in self.vertices:
            print(vertex, "->", self.vertices[vertex])

# Example usage:
adjacency_list = [[1, 2], [0, 2], [0, 1]]
graph = Graph(adjacency_list)
print("Depth-First Search Traversal:")
print(graph.dfs(0))  # Start DFS from vertex 0
